import re

# generate a float from mixed numbers in a string
def convert_to_float(frac_str):
    try:
        return float(frac_str)
    except ValueError:
        num, denom = frac_str.split('/')
        try:
            leading, num = num.split(' ')
            whole = float(leading)
        except ValueError:
            whole = 0
        frac = float(num) / float(denom)
        return whole - frac if whole < 0 else whole + frac

# durations nlp function
def duration_normalizer(duration_string):
## statics
    number_word_dictionary = {'half':.5, '1/2':.5, 'a':1, 'one':1, 'couple':2, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9, 'ten':10, 'eleven':11, 'twelve':12, 'thirteen':13, 'fourteen':14, 'fifteen':15, 'sixteen':16, 'seventeen':17, 'eighteen':18, 'nineteen':19, 'twenty':20}
    duration_coefficient_dictionary = {'seconds':float(1/60),'minutes':float(1), 'hours':float(60), 'days':float(60*24), 'weeks':float(60*24*7)}
### nlp mechanism for parsing duration words from a string of duration information
    duration_construct_pattern = 'sec|se|se$|^se$|^s$|min|mn|mn$|^mn$|^min|^m$|^m+|hour|^h$|^hr$|hr$|hrs$|^hr+|hr\s|hr$|day|week'
### nlp mechanism for parsing words from a string of duration information
    number_word_construct_pattern = '\w+|\w$|\w'
### nlp mechanism for parsing numerical data from a string of duration information
    mixed_numerical_construct_pattern = ' (\d+(?:(?:\s\d+)*\/\d+)?) ' 
    numerical_construct_pattern = ' [-+]? (?: (?: \d* \. \d+ ) | (?: \d+ \.? ) )(?: [Ee] [+-]? \d+ ) ? '
## define variables
    duration_coefficient = []
    duration_coefficients_list = list()
    minutes_list = []
    minutes_sum = float()
    numberWord_quantities_list = []
    numerical_durations_string = duration_string
    quantities_list = list()
## nlp preprocessing
### generate a list of numerical duration quantities
#### extract mixed numbers from a string of duration information
    mixed_numbers = re.compile(mixed_numerical_construct_pattern, re.VERBOSE)
    mixed_numerical_duration_quantities_list = mixed_numbers.findall(duration_string)
#### substitute floats for mixed numbers from the string of duration information
    for i in range(len(mixed_numerical_duration_quantities_list)):
        try:
            numerical_durations_string = re.sub(mixed_numerical_duration_quantities_list[i], str(convert_to_float(mixed_numerical_duration_quantities_list[i])), duration_string)
        except Exception:
            numerical_durations_string = duration_string
#### extract only numberical data from the transformed string of duration information
    numbers = re.compile(numerical_construct_pattern, re.VERBOSE)
    numerical_duration_quantities_list = numbers.findall(numerical_durations_string)
#### disregard any negations generated by the nlp numerical parsing
    for i in range(0, len(numerical_duration_quantities_list)):
        numerical_duration_quantities_list[i] = abs(float(numerical_duration_quantities_list[i]))
### generate a list of numberWord quantities
    words = re.compile(number_word_construct_pattern, re.IGNORECASE)
    words_in_duration_string = words.findall(duration_string)
    words_in_duration_string = [word.lower() for word in words_in_duration_string]
    numberWord_quantities_list = [number_word_dictionary.get(word) for word in words_in_duration_string if number_word_dictionary.get(word) != None]
### assign numeric quantities and text quantities to a single quantities list 
    if not numberWord_quantities_list:
        quantities_list = numerical_duration_quantities_list
    if not numerical_duration_quantities_list:
        quantities_list = numberWord_quantities_list        
### generate a list of duration coefficients 
    durations = re.compile(duration_construct_pattern, re.IGNORECASE)
    duration_coefficient_labels_list = durations.findall(duration_string)
#### convert duration labels to numerical values
    try:
        for i in range(len(duration_coefficient_labels_list)):
            duration_coefficient = [value for key, value in duration_coefficient_dictionary.items() if key.startswith(str(duration_coefficient_labels_list[i][0:1]).lower())]
            duration_coefficients_list.append(duration_coefficient[0])        
    except Exception:
        ValueError
### calculate product of coefficients and quantities lists
    if len(duration_coefficients_list) < 2:
        duration_coefficients_list = duration_coefficients_list*len(quantities_list)
    try:
        for i in range(len(quantities_list)):
            minutes_list.append(duration_coefficients_list[i]*quantities_list[i])
        if len(minutes_list)==1:
            minutes_list = minutes_list*2
        if minutes_list[0] > minutes_list[1]:
            minutes_sum = minutes_list[0] + minutes_list[1]
            minutes_list = [minutes_sum]*2       
    except Exception:
        ValueError
    return minutes_list

def two_digits_from_digits(digits):
    if len(str(digits)) == 1:
        digits = '0' + str(digits)
    return str(digits)